buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java-library'
    id 'jacoco'
    id 'maven-publish'
}

apply plugin: 'java-library'
apply plugin: 'signing'
apply plugin: 'maven'

ext {
    jacksonVersion = "2.8.11"
    isRelease = false
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled true
        csv.enabled false
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [""])
        })
    }
}

group 'gr.mmichailidis'
version '1.1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'http://repo.spring.io/milestone' }
}

test {
    maxParallelForks = 1
}

dependencies {
    compile group: 'io.vavr', name: 'vavr', version: '1.0.0-alpha-3'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.6.RELEASE'
    compile group: 'org.json', name: 'json', version: '20180813'

    compile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'
    compile group: 'javax.inject', name: 'javax.inject', version: '1'

    compile('org.apache.qpid:qpid-broker:7.0.6') {
        force = true
        exclude(module: "qpid-broker-plugins-logging-logback")
        exclude(module: "com.sleepycat:je:7.4.5")
        exclude group: "ch.qos.logback", module: "logback-classic"
        exclude group: "ch.qos.logback", module: "logback-core"
    }

    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-common', version: '9.4.3.v20170317'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-server', version: '9.4.3.v20170317'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-api', version: '9.4.3.v20170317'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-servlet', version: '9.4.3.v20170317'
    compile group: 'org.eclipse.jetty', name: 'jetty-io', version: '9.4.3.v20170317'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.3.v20170317'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.3.v20170317'
    compile group: 'org.eclipse.jetty', name: 'jetty-http', version: '9.4.3.v20170317'
    compile group: 'org.eclipse.jetty', name: 'jetty-util', version: '9.4.3.v20170317'
    compile group: 'org.eclipse.jetty', name: 'jetty-continuation', version: '9.4.3.v20170317'

    compile group: 'com.sleepycat', name: 'je', version: '18.1.11'
    compile group: 'io.projectreactor.rabbitmq', name: 'reactor-rabbitmq', version: '1.0.0.RELEASE'
    testImplementation group: 'io.projectreactor', name: 'reactor-test', version: '3.2.2.RELEASE'

    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    useGpgCmd()
    sign configurations.archives
}

jar {
    manifest {
        attributes(
                'Class-Path': 'dojo-1.12.2-distribution.zip',
                'SomeOther': 'custom'
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'gr.mmichailidis'
            artifactId 'amqprunner'
            version '1.0.0'

            from components.java

            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            if (isRelease) {
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username project.findProperty("sonatypeUsername") ?: ""
                password project.findProperty("sonatypePassword") ?: ""
            }
        }
    }
}

publish {
    isRelease = true
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'In-Memory AMQP broker'
            name 'AmqpRunner'
            url 'https://github.com/mmichailidis/AmqpRunner'
            organization {
                name 'gr.mmichailidis'
                url 'https://github.com/mmichailidis'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/mmichailidis/AmqpRunner/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/mmichailidis/AmqpRunner/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/mmichailidis/AmqpRunner/'
                connection 'git@github.com:mmichailidis/AmqpRunner.git'
                developerConnection 'git@github.com:mmichailidis/AmqpRunner.git'
            }
            developers {
                developer {
                    name 'MMichailidis'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}
